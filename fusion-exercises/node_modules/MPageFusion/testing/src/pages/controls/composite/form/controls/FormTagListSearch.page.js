"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _FormControl = _interopRequireDefault(require("../FormControl.page"));

var _TagListSearch = _interopRequireDefault(require("../../tag-list/search/TagListSearch.page"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var ROOT_SELECTOR = ".mpageui-FormTagListSearch";

var FormTagListSearchPage = /*#__PURE__*/function (_FormControlPage) {
  _inheritsLoose(FormTagListSearchPage, _FormControlPage);

  function FormTagListSearchPage(driver, options) {
    var _this;

    _this = _FormControlPage.call(this, driver, options) || this;
    _this._tagListSearch = new _TagListSearch["default"](driver, {
      selectorList: _this.selectorList
    });
    return _this;
  }

  var _proto = FormTagListSearchPage.prototype;

  /**
   * focuses the textbox
   * @memberof module:MPageFusion/testing.composite.form.FormTagListSearchPage
   * @returns {Promise} resolves when the action is completed
   */
  _proto.focus = function focus() {
    return this._tagListSearch.focus();
  }
  /**
   * Whether the combobox is blur
   * @memberof module:MPageFusion/testing.composite.form.FormTagListSearchPage
   * @returns {Promise} resolves when the action is completed
   */
  ;

  _proto.blur = function blur() {
    return this._tagListSearch.blur();
  }
  /**
   * enters text to the combobox
   * @memberof module:MPageFusion/testing.composite.form.FormTagListSearchPage
   * @param {String} text -the input text
   * @returns {Promise} resolves when the action is completed
   */
  ;

  _proto.enterText = function enterText(text) {
    return this._tagListSearch.enterText(text);
  }
  /**
   * clears text from the combobox textbox
   * @memberof module:MPageFusion/testing.composite.form.FormTagListSearchPage
   * @returns {Promise} resolves when the action is completed
   */
  ;

  _proto.clearText = function clearText() {
    return this._tagListSearch.clearText();
  }
  /**
   * Returns the list of displayed tags
   * @memberof module:MPageFusion/testing.composite.form.FormTagListSearchPage
   * @returns {Promise<List<Tags>>} Returns the list of displayed tags or an empty array.
   */
  ;

  /**
   * Deletes the tag specified
   * @memberof module:MPageFusion/testing.composite.entry.TagListSearchPage
   * @param {Number} index - index of the tag to delete
   * @returns {Promise} - Returns a promise that resolves when the tag's delete icon is clicked
   */
  _proto.deleteTag = function deleteTag(index) {
    return this._tagListSearch.deleteTag(index);
  };

  _createClass(FormTagListSearchPage, [{
    key: "elementSelector",
    get: function get() {
      return ROOT_SELECTOR;
    }
    /**
     * whether the search list is displayed
     * @memberof module:MPageFusion/testing.composite.form.FormTagListSearchPage
     * @returns {Promise<boolean>} true or false
     */

  }, {
    key: "isOpen",
    get: function get() {
      return this._tagListSearch.isOpen;
    }
    /**
     * returns placeholder text from the combobox
     * @memberof module:MPageFusion/testing.composite.form.FormTagListSearchPage
     * @returns {Promise<string>} placeholder text
     */

  }, {
    key: "placeholder",
    get: function get() {
      return this._tagListSearch.placeholder;
    }
    /**
     * the value in the textbox
     * @memberof module:MPageFusion/testing.composite.form.FormTagListSearchPage
     * @returns {Promise<String>} display text
     */

  }, {
    key: "value",
    get: function get() {
      return this._tagListSearch.value;
    }
    /**
     * returns the item from the search list based on option(index)
     * @memberof module:MPageFusion/testing.composite.form.FormTagListSearchPage
     * @returns {List<module:MPageFusion/testing.composite.search.SearchPage.searchList>} searchList
     */

  }, {
    key: "option",
    get: function get() {
      return this._tagListSearch.option;
    }
    /**
     * whether the combo box is focused
     * @memberof module:MPageFusion/testing.composite.form.FormTagListSearchPage
     * @returns {Promise<boolean>} true or false
     */

  }, {
    key: "isFocused",
    get: function get() {
      return this._tagListSearch.isFocused;
    }
  }, {
    key: "tags",
    get: function get() {
      return this._tagListSearch.tags;
    }
  }]);

  return FormTagListSearchPage;
}(_FormControl["default"]);

exports["default"] = FormTagListSearchPage;