"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _UIComponent = _interopRequireDefault(require("../../../../UIComponent.page"));

var _seleniumWebdriver = require("selenium-webdriver");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var ROOT_SELECTOR = ".mpageui-PopupList";
/**
 * @param {WebElement} rootElement - The root element of the popupListPage object
 * @Private
 * @returns {Promise<Array<WebElement>>} a Promise containing an array of child WebElements
 */

var buildElementArray = function buildElementArray(rootElement) {
  return rootElement.then(function (element) {
    return element.findElements(_seleniumWebdriver.By.css(":scope > *"));
  });
};
/**
 * The PopupListPage class
 * @class module:MPageFusion/testing.composite.dialog.PopupListPage
 *
 * @example
 * const popupList = new PopupListPage(driver, {selectorList: this.selectorList});
 * const listElementCount = popupList.listElementsCount;
 */


var PopupListPage = /*#__PURE__*/function (_UIComponentPage) {
  _inheritsLoose(PopupListPage, _UIComponentPage);

  function PopupListPage() {
    return _UIComponentPage.apply(this, arguments) || this;
  }

  var _proto = PopupListPage.prototype;

  /**
   * @memberOf module:MPageFusion/testing.composite.dialog.PopupListPage
   * @param {Number} index - zero-based index of the specified list element
   * @returns {Promise<Boolean>} Returns whether the specified List element is selected
   */
  _proto.elementIsSelected = function elementIsSelected(index) {
    return buildElementArray(this.getRootElement()).then(function (elements) {
      return elements[index].getAttribute("class");
    }).then(function (classString) {
      return classString.includes("is-selected");
    });
  }
  /**
   * @memberOf module:MPageFusion/testing.composite.dialog.PopupListPage
   * @param {Number} index - zero-based index of the specified list element
   * @returns {Promise<string>} Returns the display of the specified List element
   */
  ;

  _proto.getElementDisplay = function getElementDisplay(index) {
    return buildElementArray(this.getRootElement()).then(function (elements) {
      return elements[index].getAttribute("innerText");
    });
  }
  /**
   * Executes a click event on the specified List element
   * @memberOf module:MPageFusion/testing.composite.dialog.PopupListPage
   * @param {Number} index - zero-based index of the specified list element
   * @returns {Promise} whether or not the click was successful
   */
  ;

  _proto.clickElement = function clickElement(index) {
    return buildElementArray(this.getRootElement()).then(function (elements) {
      return elements[index].click();
    });
  }
  /**
   * Returns an array of objects containing the display string and the isSelected status of each list element in the
   * popupList.
   * @memberOf module:MPageFusion/testing.composite.dialog.PopupListPage
   * @returns {Promise<Array<Object>>} Promise containing an array of objects with relevant data points
   */
  ;

  _createClass(PopupListPage, [{
    key: "elementSelector",
    get: function get() {
      return ROOT_SELECTOR;
    }
    /**
     * @memberOf module:MPageFusion/testing.composite.dialog.PopupListPage
     * @returns {Promise<Number>} count of child list elements
     */

  }, {
    key: "listElementsCount",
    get: function get() {
      return buildElementArray(this.getRootElement()).then(function (elements) {
        return elements.length;
      });
    }
  }, {
    key: "data",
    get: function get() {
      return buildElementArray(this.getRootElement()).then(function (elements) {
        return Promise.all(elements.map(function (element) {
          return Promise.all([element.getAttribute("innerText"), element.getAttribute("class")]).then(function (_ref) {
            var _ref2 = _slicedToArray(_ref, 2),
                text = _ref2[0],
                classString = _ref2[1];

            return {
              display: text,
              isSelected: classString.includes("is-selected")
            };
          });
        }));
      });
    }
  }]);

  return PopupListPage;
}(_UIComponent["default"]);

var _default = PopupListPage;
exports["default"] = _default;