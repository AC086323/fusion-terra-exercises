"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _seleniumWebdriver = require("selenium-webdriver");

var _UIComponent = _interopRequireDefault(require("../../../UIComponent.page"));

var _Button = _interopRequireDefault(require("../../atomic/button/Button.page"));

var _ButtonGroup = _interopRequireDefault(require("../../composite/button/ButtonGroup.page"));

var _Popup = _interopRequireDefault(require("../dialog/popup/Popup.page"));

var _Menu = _interopRequireDefault(require("../menu/Menu.page"));

var _Label = _interopRequireDefault(require("../../atomic/label/Label.page"));

var _ResponsiveButtonGroup = _interopRequireDefault(require("../../composite/button/ResponsiveButtonGroup.page"));

var _PopupList = _interopRequireDefault(require("../dialog/popup/PopupList.page"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var ROOT_SELECTOR = ".mpageui-ComponentHeader";
var HEADER_TITLE = ".mpageui-ComponentHeader-title";
var COUNT = ".mpageui-ComponentHeader-count";
var SUB_LABEL = ".mpageui-ComponentHeader-sublabel";
var LOOKBACK_CLASS = "mpageui-ComponentHeader";
var ERROR_ICON = ".mpageui-ComponentHeader-errorIcon";
var GAPCHECK_ICON = ".mpageui-ComponentHeader-gapcheckicon";
var SPLIT_BUTTON = ".mpageui-SplitButton-button";
var PLUS_ADD = ".mpageui-ComponentHeader-plusadd";
var HEADER_REFRESH = ".mpageui-ComponentHeader-refresh";
var BUTTON_GROUP = ".mpageui-ButtonGroup";
var HEADER_TOGGLES = ".mpageui-ComponentHeader-toggles";
var SVG_MENU = ".mpageui-SvgIcon.mpageui-SvgIcon-Menu";
var OVERLAY_SELECTOR = ".mpageui-Popup-layover";
var COMPONENT_HEADER_BUTTONS = ".mpageui-ComponentHeader-buttons";
var TYPES = {
  SUBHEADER: "lookbackSubheader",
  DEFAULT: "defaultLookback",
  LOOKBACK_LABEL: "lookbackLabel"
};
var LOOKBACK_SELECTOR = ".mpageui-ComponentHeader-lookbackSelector";
/**
 * The ComponentHeaderPage class
 * @class module:MPageFusion/testing.composite.ComponentHeaderPage
 *
 * @example
 * const componentHeader = new ComponentHeaderPage(driver);
 * componentHeader.toggleButtons.button().display;
 * componentHeader.refreshButton.click();
 */

var ComponentHeaderPage = /*#__PURE__*/function (_UIComponentPage) {
  _inheritsLoose(ComponentHeaderPage, _UIComponentPage);

  function ComponentHeaderPage() {
    return _UIComponentPage.apply(this, arguments) || this;
  }

  var _proto = ComponentHeaderPage.prototype;

  /**
   * This method returns the Popup page object corresponding to the card view's Lookback options popup.
   * @memberOf module:MPageFusion/testing.composite.ComponentHeaderPage
   * @param {Number} index - index in the component header buttons section for the lookback popup
   * @returns {PopupPage} PopupPage
   */
  _proto.getCardViewLookbackPopup = function getCardViewLookbackPopup(index) {
    return new _Popup["default"](this.driver, {
      selectorList: this.selectorList.concat("" + COMPONENT_HEADER_BUTTONS),
      index: index
    });
  }
  /**
   * This method returns the PopupListPage object, if the cardViewLookbackPopup has been opened, otherwise returns an error
   * @memberOf module:MPageFusion/testing.composite.ComponentHeaderPage
   * @param {Number} index - index in the component header buttons section for the lookback popup
   * @returns {Promise<PopupListPage| Error>} Promise containing PopupListPage or Error if popup is not open
   */
  ;

  _proto.getCardViewLookbackOptions = function getCardViewLookbackOptions(index) {
    var _this = this;

    var popup = this.getCardViewLookbackPopup(index);
    return popup.get("isOpen").then(function (isOpen) {
      if (!isOpen) {
        throw new Error("Popup needs to be opened to access lookback options");
      }

      return new _PopupList["default"](_this.driver, {
        selectorList: popup._pane.contentSelectorList
      }); // eslint-disable-line no-underscore-dangle
    });
  };

  _createClass(ComponentHeaderPage, [{
    key: "elementSelector",
    get:
    /**
     * @private
     */
    function get() {
      return ROOT_SELECTOR;
    }
    /**
    * gets the title of component header
    * @memberOf module:MPageFusion/testing.composite.ComponentHeaderPage
    * @returns {Promise<String>} title
    */

  }, {
    key: "title",
    get: function get() {
      return this.getNestedElement(HEADER_TITLE).then(function (element) {
        return element.getText();
      });
    }
    /**
    * checks whether the title is shown as link
    * @memberOf module:MPageFusion/testing.composite.ComponentHeaderPage
    * @returns {Promise<Boolean>} isTitleShownAsLink
    */

  }, {
    key: "isTitleShownAsLink",
    get: function get() {
      return Promise.resolve(this.getNestedElement(HEADER_TITLE).then(function (element) {
        return element.getTagName();
      })).then(function (element) {
        return element === "a";
      });
    }
    /**
    * gets the count
    * @memberOf module:MPageFusion/testing.composite.ComponentHeaderPage
    * @returns {Promise<String>} count
    */

  }, {
    key: "count",
    get: function get() {
      return this.getNestedElement(COUNT).then(function (element) {
        return element.getText();
      });
    }
    /**
    * gets sub label in the component header
    * @memberOf module:MPageFusion/testing.composite.ComponentHeaderPage
    * @returns {Promise<String>} subLabel
    */

  }, {
    key: "subLabel",
    get: function get() {
      return this.getNestedElement(SUB_LABEL).then(function (element) {
        return element.getText();
      });
    }
    /**
    * gets lookbackLabel in the component header
    * @memberOf module:MPageFusion/testing.composite.ComponentHeaderPage
    * @returns {Promise<String>} lookbackLabel
    */

  }, {
    key: "lookbackLabel",
    get: function get() {
      var _this2 = this;

      return this.getNestedElement(new _Label["default"](this.driver).elementSelector).then(function (element) {
        return element.getAttribute("class");
      }).then(function (classNames) {
        return Object.values(TYPES).find(function (type) {
          return classNames.includes(LOOKBACK_CLASS + "-" + type) || "";
        });
      }).then(function (css) {
        return _this2.getNestedElement("." + LOOKBACK_CLASS + "-" + css);
      }).then(function (element) {
        return element.getText();
      });
    }
    /**
    * gets lookbackLabel in the component header for the card view
    * @memberOf module:MPageFusion/testing.composite.ComponentHeaderPage
    * @returns {Object} lookbackLabel
    */

  }, {
    key: "card",
    get: function get() {
      var _this3 = this;

      return {
        lookbackLabel: function lookbackLabel() {
          return _this3.getNestedElement("." + LOOKBACK_CLASS + "-" + TYPES.SUBHEADER).then(function (element) {
            return element.getText();
          });
        }
      };
    }
    /**
    * gets defaultLookbackLabel in the component header
    * @memberOf module:MPageFusion/testing.composite.ComponentHeaderPage
    * @returns {Promise<String>} lookbackLabel
    */

  }, {
    key: "defaultLookbackLabel",
    get: function get() {
      return this.getNestedElement("." + LOOKBACK_CLASS + "-" + TYPES.DEFAULT).then(function (element) {
        return element.getText();
      });
    }
    /**
    * checks whether error icon is shown.
    * @memberOf module:MPageFusion/testing.composite.ComponentHeaderPage
    * @returns {Promise<Boolean>} isErrorIconShown
    */

  }, {
    key: "isErrorIconShown",
    get: function get() {
      return this.getNestedElement(ERROR_ICON).then(function (element) {
        return Boolean(element);
      });
    }
    /**
    * checks whether gap check indicator is shown
    * @memberOf module:MPageFusion/testing.composite.ComponentHeaderPage
    * @returns {Promise<Boolean>} isGapCheckIndicatorShown
    */

  }, {
    key: "isGapCheckIndicatorShown",
    get: function get() {
      return this.getNestedElement(GAPCHECK_ICON).then(function (element) {
        return Boolean(element);
      });
    }
    /**
    * checks whether plusadd button is split
    * @memberOf module:MPageFusion/testing.composite.ComponentHeaderPage
    * @returns {Promise<Boolean>} isPlusAddSplitButton
    */

  }, {
    key: "isPlusAddSplitButton",
    get: function get() {
      return this.getNestedElement(SPLIT_BUTTON).then(function (element) {
        return Boolean(element);
      });
    }
    /**
    * The Plusadd split button aria label
    * @memberOf module:MPageFusion/testing.composite.ComponentHeaderPage
    * @returns {Promise<String>} label
    */

  }, {
    key: "plusAddSplitButtonLabel",
    get: function get() {
      return this.getNestedElement(SPLIT_BUTTON).then(function (element) {
        return element.getAttribute("aria-label");
      });
    }
    /**
    * gets the plusadd button
    * @memberOf module:MPageFusion/testing.composite.ComponentHeaderPage
    * @returns {module:MPageFusion/testing.atomic.button.Button} plusAddButton
    */

  }, {
    key: "plusAddButton",
    get: function get() {
      return new _Button["default"](this.driver, {
        selectorList: this.selectorList.concat(PLUS_ADD),
        useExactSelector: true
      });
    }
    /**
    * gets the plusadd popup
    * @memberOf module:MPageFusion/testing.composite.ComponentHeaderPage
    * @returns {module:MPageFusion/testing.composite.dialog.popup.PopupPage} plusAddPopup
    */

  }, {
    key: "plusAddPopup",
    get: function get() {
      return new _Popup["default"](this.driver, {
        selectorList: this.selectorList.concat(PLUS_ADD)
      });
    }
    /**
    * checks whether add button is shown
    * @memberOf module:MPageFusion/testing.composite.ComponentHeaderPage
    * @returns {Promise<Boolean>} isAddButtonShown
    */

  }, {
    key: "isAddButtonShown",
    get: function get() {
      return this.getNestedElement(PLUS_ADD).then(function (element) {
        return Boolean(element);
      });
    }
    /**
    * checks whether refresh button is shown
    * @memberOf module:MPageFusion/testing.composite.ComponentHeaderPage
    * @returns {Promise<Boolean>} isRefreshButtonShown
    */

  }, {
    key: "isRefreshButtonShown",
    get: function get() {
      return this.getNestedElement(HEADER_REFRESH).then(function (element) {
        return Boolean(element);
      });
    }
    /**
    * gets the refresh button
    * @memberOf module:MPageFusion/testing.composite.ComponentHeaderPage
    * @returns {module:MPageFusion/testing.atomic.button.Button} refreshButton
    */

  }, {
    key: "refreshButton",
    get: function get() {
      return new _Button["default"](this.driver, {
        selectorList: this.selectorList.concat(HEADER_REFRESH),
        useExactSelector: true
      });
    }
    /**
    * gets the toggle button group
    * @memberOf module:MPageFusion/testing.composite.ComponentHeaderPage
    * @returns {module:MPageFusion/testing.composite.button.ButtonGroup} toggleButtons
    */

  }, {
    key: "toggleButtons",
    get: function get() {
      return new _ButtonGroup["default"](this.driver, {
        selectorList: this.selectorList.concat("" + BUTTON_GROUP + HEADER_TOGGLES),
        useExactSelector: true
      });
    }
    /**
    * gets the component menu
    * @memberOf module:MPageFusion/testing.composite.ComponentHeaderPage
    * @returns {module:MPageFusion/testing.composite.menu.Menu} componentMenu
    */

  }, {
    key: "componentMenu",
    get: function get() {
      return new _Menu["default"](this.driver);
    }
    /**
    * opens the component menu
    * @memberOf module:MPageFusion/testing.composite.ComponentHeaderPage
    * @returns {module:MPageFusion/testing.composite.button.ButtonGroup} componentMenuOpen
    * @returns {Promise} resolves when the action completes
    */

  }, {
    key: "componentMenuOpen",
    get: function get() {
      return this.getNestedElement(SVG_MENU).then(function (element) {
        return element.click();
      });
    }
    /**
    * closes the component menu
    * @memberOf module:MPageFusion/testing.composite.ComponentHeaderPage
    * @returns {Promise} resolves when the action completes
    */

  }, {
    key: "componentMenuClose",
    get: function get() {
      return this.driver.findElement(_seleniumWebdriver.By.css(OVERLAY_SELECTOR)).then(function (element) {
        return element.click();
      });
    }
    /**
    * This method gets the ResponsiveButtonGroup page object.
    * @memberOf module:MPageFusion/testing.composite.ComponentHeaderPage
    * @returns {module:MPageFusion/testing.composite.button.responsiveButtonGroup} lookbackOptions
    */

  }, {
    key: "lookbackOptions",
    get: function get() {
      return new _ResponsiveButtonGroup["default"](this.driver, {
        selectorList: this.selectorList.concat(LOOKBACK_SELECTOR)
      });
    }
  }]);

  return ComponentHeaderPage;
}(_UIComponent["default"]);

exports["default"] = ComponentHeaderPage;