"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _TagList = _interopRequireDefault(require("../TagList.page"));

var _TextBox = _interopRequireDefault(require("../../../atomic/textbox/TextBox.page"));

var _SearchListItem = _interopRequireDefault(require("../../search/SearchListItem.page"));

var _List = _interopRequireDefault(require("../../../../helpers/List"));

var _UIComponent = _interopRequireDefault(require("../../../../UIComponent.page"));

var _seleniumWebdriver = require("selenium-webdriver");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var ROOT_SELECTOR = ".mpageui-TagListSearch";
var DROP_DOWN_SELECTOR = ".mpageui-InlineDropDown";
var SEARCH_LIST_SELECTOR = ".mpageui-SearchList";

var TagListSearchPage = /*#__PURE__*/function (_UIComponentPage) {
  _inheritsLoose(TagListSearchPage, _UIComponentPage);

  function TagListSearchPage(driver, options) {
    var _this;

    _this = _UIComponentPage.call(this, driver, options) || this;
    _this._taglist = new _TagList["default"](driver, {
      selectorList: _this.selectorList
    });
    _this._textBox = new _TextBox["default"](driver, {
      selectorList: _this.selectorList
    });
    return _this;
  }

  var _proto = TagListSearchPage.prototype;

  /**
   * focuses the textbox
   * @memberof module:MPageFusion/testing.composite.entry.TagListSearchPage
   * @returns {Promise} resolves when the action is completed
   */
  _proto.focus = function focus() {
    return this._textBox.focus();
  }
  /**
   * Whether the combobox is blur
   * @memberof module:MPageFusion/testing.composite.entry.TagListSearchPage
   * @returns {Promise} resolves when the action is completed
   */
  ;

  _proto.blur = function blur() {
    return this._textBox.blur();
  }
  /**
   * enters text to the combobox
   * @memberof module:MPageFusion/testing.composite.entry.TagListSearchPage
   * @param {String} text -the input text
   * @returns {Promise} resolves when the action is completed
   */
  ;

  _proto.enterText = function enterText(text) {
    return this._textBox.enterText(text);
  }
  /**
   * clears text from the combobox textbox
   * @memberof module:MPageFusion/testing.composite.entry.TagListSearchPage
   * @returns {Promise} resolves when the action is completed
   */
  ;

  _proto.clearText = function clearText() {
    return this._textBox.clearText();
  }
  /**
   * Returns the list of displayed tags
   * @memberof module:MPageFusion/testing.composite.entry.TagListSearchPage
   * @returns {Promise<List<Tags>>} Returns the list of displayed tags or an empty array.
   */
  ;

  /**
   * Deletes the tag specified
   * @memberof module:MPageFusion/testing.composite.entry.TagListSearchPage
   * @param {Number} index - index of the tag to delete
   * @returns {Promise} - Returns a promise that resolves when the tag's delete icon is clicked
   */
  _proto.deleteTag = function deleteTag(index) {
    return this.tags.then(function (tags) {
      // makes sure there are tags to delete and that there is a tag at the index provided
      if (tags.length > 0 && tags.length > index) {
        return tags(index).icon.click();
      }

      return new Promise(function (resolve) {
        return resolve([]);
      });
    });
  };

  _createClass(TagListSearchPage, [{
    key: "elementSelector",
    get: function get() {
      return ROOT_SELECTOR;
    }
    /**
     * whether the search list is displayed
     * @memberof module:MPageFusion/testing.composite.entry.TagListSearchPage
     * @returns {Promise<boolean>} true or false
     */

  }, {
    key: "isOpen",
    get: function get() {
      return this.getRootElement().then(function (element) {
        return element.findElement(_seleniumWebdriver.By.css(DROP_DOWN_SELECTOR));
      }).then(function () {
        return true;
      })["catch"](function () {
        return false;
      });
    }
    /**
     * returns placeholder text from the combobox
     * @memberof module:MPageFusion/testing.composite.entry.TagListSearchPage
     * @returns {Promise<string>} placeholder text
     */

  }, {
    key: "placeholder",
    get: function get() {
      return this._textBox.placeholder;
    }
    /**
     * the value in the textbox
     * @memberof module:MPageFusion/testing.composite.entry.TagListSearchPage
     * @returns {Promise<String>} display text
     */

  }, {
    key: "value",
    get: function get() {
      return this._textBox.value;
    }
    /**
     * returns the item from the search list based on option(index)
     * @memberof module:MPageFusion/testing.composite.entry.TagListSearchPage
     * @returns {List<module:MPageFusion/testing.composite.search.SearchPage.searchList>} searchList
     */

  }, {
    key: "option",
    get: function get() {
      return (0, _List["default"])({
        list: this,
        itemPage: _SearchListItem["default"],
        selectorList: this.selectorList,
        containerSelector: DROP_DOWN_SELECTOR + " " + SEARCH_LIST_SELECTOR
      });
    }
    /**
     * whether the combo box is focused
     * @memberof module:MPageFusion/testing.composite.entry.TagListSearchPage
     * @returns {Promise<boolean>} true or false
     */

  }, {
    key: "isFocused",
    get: function get() {
      return this._textBox.isFocused;
    }
  }, {
    key: "tags",
    get: function get() {
      return this._taglist.tags;
    }
  }]);

  return TagListSearchPage;
}(_UIComponent["default"]);

exports["default"] = TagListSearchPage;