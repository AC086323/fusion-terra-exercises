"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.iconPages = exports.classTypeMap = exports.ICON_TYPES = void 0;

var _fs = _interopRequireDefault(require("fs"));

var _path = _interopRequireDefault(require("path"));

var _UIComponent = _interopRequireDefault(require("../../../../UIComponent.page"));

var _ref;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

// converts to MACRO_CASE
var convertToMacroCase = function convertToMacroCase(str) {
  var replacer = function replacer(match, p1, p2) {
    return [p1, p2].join("_");
  };

  return str.replace(new RegExp(/(.)([A-Z][a-z]+)/, "g"), replacer) // handle acronyms
  .replace(new RegExp(/([a-z0-9])([A-Z])/, "g"), replacer).toUpperCase();
};

var iconFolder = _path["default"].join(__dirname, // eslint-disable-line no-undef
"../../../../../../../src/main/js/cerner/mpagedev/mpagefusion/controls/atomic/icon/svg/category");

var iconCategories = _fs["default"].readdirSync(iconFolder).filter(function (fileName) {
  return !fileName.includes(".") || fileName === "helpers";
});

var iconCategoryMap = iconCategories.reduce(function (map, category) {
  map[category] = _fs["default"].readdirSync(iconFolder + "/" + category).map(function (file) {
    return file.split(".js")[0];
  });
  return map;
}, {});

var icons = (_ref = []).concat.apply(_ref, _toConsumableArray(Object.values(iconCategoryMap))); // dynamically create icon classes


var createIconPageObject = function createIconPageObject(name) {
  var page = function page() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _UIComponent["default"].call.apply(_UIComponent["default"], [this].concat(args));
  };

  page.prototype = Object.create(_UIComponent["default"].prototype);
  page.prototype.constructor = page;
  Object.defineProperty(page.prototype, "elementSelector", {
    get: function get() {
      return ".mpageui-SvgIcon-" + name;
    }
  });
  return page;
};
/**
 * TYPES
 * @description The set of fusion svg icon types
 * @enum
 * @memberOf module:MPageFusion/testing.atomic.icon.svg.SvgIconPage
 */


var ICON_TYPES = icons.reduce(function (map, icon) {
  map[convertToMacroCase(icon)] = icon;
  return map;
}, {});
/**
 * A mapping of icon css class to icon type
 * @type {Object}
 * @private
 */

exports.ICON_TYPES = ICON_TYPES;
var classTypeMap = icons.reduce(function (map, icon) {
  var className = "mpageui-SvgIcon-" + icon;
  map[className] = ICON_TYPES[convertToMacroCase(icon)];
  return map;
}, {});
/**
 * Page objects for all fusion SvgIcons grouped by category
 * @type {Object}
 * @private
 */

exports.classTypeMap = classTypeMap;
var iconPages = Object.entries(iconCategoryMap).reduce(function (map, _ref2) {
  var _ref3 = _slicedToArray(_ref2, 2),
      category = _ref3[0],
      iconList = _ref3[1];

  map[category] = iconList.reduce(function (iconMap, iconName) {
    iconMap[iconName + "Page"] = createIconPageObject(iconName);
    return iconMap;
  }, {});
  return map;
}, {});
exports.iconPages = iconPages;